# https://tox.wiki/en/latest/config.html#tox-global-settings

# https://pytest-cov.readthedocs.io/en/latest/config.html
# https://docs.pytest.org/en/6.2.x/reference.html?highlight=command%20line%20options#command-line-flags

# https://tox.wiki/en/latest/config.html#tox-environments

# Configuration of tox command.
[tox]
envlist =
    docs
    build
    check
    py{39,310}
minversion = 3.20
skip_missing_interpreters = true


# Storage space for reusable configuration variables.
[develop_common]
basepython = python3.9
common_env_vars =
    PYTHONPATH = {toxinidir}/tests
    PYTHONUNBUFFERED = yes


# Shared environment configuration.
[testenv]
setenv =
    {[develop_common]common_env_vars}
passenv = *
recreate = false
skip_install = false
usedevelop = true


# Run pytest test suite and generate coverage report.
[testenv:py{39,310}]
setenv =
    {[develop_common]common_env_vars}
deps =
    -r requirements.txt
    -r requirements-min.txt
    -r requirements-test.txt
commands =
    coverage erase
    pytest {posargs} --cov-report html:"coverage/{envname}_htmlcov"
        # number of corest to use at the same time is limited intentionally
        # to mitigate problems with to high pooling rate on systems with high
        # total number of cores


# Perform mypy static type check on codebase generate report from results.
[testenv:mypy]
recreate = false
skip_install = true
basepython = {[develop_common]basepython}
setenv =
    {[develop_common]common_env_vars}
deps =
    -r requirements-test.txt
    -r requirements-min.txt
    -r requirements.txt
commands =
    mypy --html-report "{toxinidir}/typechecking/{envname}_report" source/magic_storage tests/


# Build distribution package for single python version x.y
[testenv:build]
recreate = true
skip_install = false
deps =
    -r requirements-min.txt
    -r requirements-docs.txt
commands =
    python setup.py sdist --formats=gztar,zip bdist_wheel --universal
    #  --python-tag py3.9


# Create virtual envirionment with development utilities.
[testenv:devenv]
setenv =
    {[develop_common]common_env_vars}
basepython = {[develop_common]basepython}
recreate = true
skip_install = false
deps =
    -r requirements-dev.txt
commands =
    pre-commit install
    pre-commit install-hooks


# Perform code quality check over codespace
[testenv:check]
basepython = {[develop_common]basepython}
recreate = false
skip_install = true
ignore_errors = true
ignore_outcome = false
deps =
    -r requirements-min.txt
    -r requirements-check.txt
commands =
    isort .
    black .
    docformatter -r source/ scripts/ --in-place --docstring-length 75 75 -e .tox,.eggs,build,dist,typings,.temp,docs
    flake8 .
    pre-commit install
    pre-commit install-hooks
    pre-commit run --all-files


[testenv:docs]
basepython = {[develop_common]basepython}
recreate = false
skip_install = false
ignore_errors = false
ignore_outcome = false
deps =
    -r requirements.txt
    -r requirements-min.txt
    -r requirements-docs.txt
commands=
    mkdocs build


[testenv:docs-deploy]
basepython = {[develop_common]basepython}
recreate = true
skip_install = false
deps =
    -r requirements-dev.txt
commands =
    mkdocs gh-deploy --force
